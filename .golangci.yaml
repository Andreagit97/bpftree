run:
  timeout: 10m
  modules-download-mode: readonly
  go: "1.21"

output:
  formats:
    - format: colored-line-number
    - format: junit-xml
      path: report.xml

issues:
  max-issues-per-linter: 0
  max-same-issues: 0
  exclude-use-default: false

linters-settings:
  errcheck:
    check-type-assertions: false
    check-blank: false
    disable-default-exclusions: false
    exclude-functions:
    - (*bytes.Buffer).WriteString
    - (*strings.Builder).WriteByte
    - (*strings.Builder).WriteRune
    - (*strings.Builder).WriteString
    - fmt.Fprint
    - fmt.Fprintf
    - fmt.Fprintln
    - fmt.Print
    - fmt.Printf
    - fmt.Println
  gosec:
    includes:
    - G101
    - G102
    - G103
    - G104
    - G106
    - G108
    - G109
    - G111
    - G113
    - G201
    - G202
    - G203
    - G303
    - G307
    - G403
    - G502
    - G503
    - G504
    - G601
  revive:
    rules:
    - name: package-comments
      disabled: true
    - name: error-strings
      disabled: true
    - name: unexported-return
      disabled: true
  govet:
    enable-all: true
    disable:
      - shadow
      - fieldalignment
    settings:
      printf: # analyzer name, run `go tool vet help` to see all analyzers
        funcs: # run `go tool vet help printf` to see available settings for `printf` analyzer
          - Print
          - Printf
          - Println
          - Debug
          - Debugf
          - Info
          - Infof
          - Warn
          - Warnf
          - Error
          - Errorf
  gocritic:
    disabled-checks:
    - appendAssign
    - argOrder
    - assignOp
    - captLocal
    - dupArg
    - elseif
    - exitAfterDefer
    - ifElseChain
    - mapKey
    - singleCaseSwitch
    - unlambda
    - wrapperFunc
  nolintlint:
    allow-leading-space: true # don't require machine-readable nolint directives (i.e. with no leading space)
    allow-unused: false # report any unused nolint directives
    require-explanation: true # require an explanation for nolint directives
    require-specific: true # require nolint directives to be specific about which linter is being skipped
  forbidigo:
    # Forbid the following identifiers (list of regexp).
    forbid:
    - 'os\.Stdout(# Disallowed output streams used\. Use environment\.InputOutput\(\).Out instead\.)?'
    - 'os\.Stderr(# Disallowed output streams used\. Use environment\.InputOutput\(\).Out instead\.)?'
    - 'os\.Stdin(# Disallowed output streams used\. Use environment\.InputOutput\(\).Out instead\.)?'
  staticcheck:
    checks: [all,-ST1000,-ST1001,-ST1003,-ST1005,-SA1019,-SA4001,-ST1016]
  wrapcheck:
    ignoreSigRegexps:
      - utils\.Should
      - errox\..+\.CausedBy(f)?
      - retry\.MakeRetryable
      - policy\.NewErr.*

linters:
  # please, do not use `enable-all`: it's deprecated and will be removed soon.
  # inverted configuration with `enable-all` and `disable` is not scalable during updates of golangci-lint
  disable-all: true
  enable:
    - asciicheck
    # - bodyclose
    # - deadcode
    # - depguard
    # - dogsled
    # - dupl
    - errcheck
    # - funlen
    - forbidigo
    # - gochecknoglobals
    # - gochecknoinits
    # - gocognit
    # - goconst
    - exportloopref
    - gocritic
    # - gocyclo
    # - godot
    # - godox
    # - goerr113
    - gofmt
    - goimports
    - revive # replaces golint
    # - gomnd
    # - goprintffuncname
    - gosec
    - gosimple
    - govet
    - ineffassign
    # - interfacer
    # - lll
    # - maligned
    # - misspell
    # - nakedret TODO: add in follow-up
    # - nestif
    - nolintlint
    # - prealloc
    - rowserrcheck
    # - scopelint
    - staticcheck
    # - structcheck
    # - stylecheck
    # - testpackage
    # - typecheck
    # - unconvert TODO: add in follow-up
    # - unparam TODO: add in follow-up
    # - unused // enabled in Makefile as it fails with release tag
    # - varcheck
    # - whitespace
    # - wrapcheck
    # - wsl
